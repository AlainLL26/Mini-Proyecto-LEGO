//Problema 1 CLase
barras = int(input("Introduce el número de barras vendidas que no son frescas: "))
precio = 3.49 
descuento = 0.6
coste = barras * precio * (1 - descuento)
print("El coste de una barra fresca es " + str(precio) + "€")
print("El descuento sobre una barra no fresca es " + str(descuento * 100) + "%")
print("El coste final a pagar es " + str(round(coste, 2)) + "€")

//Problema 2 claase
n = int(input("Introduce un numero: "))
suma = n * (n + 1) / 2
print("La suma de los primeros números enteros desde 1 hasta " + str(n) + " es " + str(suma))

//Problema 3 clase
horas = float(input("Introduce tus horas de esclavitud: "))
coste = float(input("Introduce tu paga por hora: "))
paga = horas * coste
print("Tu paga es", paga)

//Problema 1. Tarea

numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Lista de números

# Inicia las variables para calcular el promedio de los números pares y el producto de los números impares
suma_pares = 0
cantidad_pares = 0
producto_impares = 1

# Iteramos sobre la lista de números
for numero in numeros:
    if numero % 2 == 0:  # Si el número es par
        suma_pares += numero  # Agregamos el número a la suma de pares
        cantidad_pares += 1  # Incrementamos el contador de pares
    else:
        producto_impares *= numero  # Multiplicamos el número al producto de impares

# Calculamos el promedio de los números pares
if cantidad_pares != 0:
    promedio_pares = suma_pares / cantidad_pares
else:
    promedio_pares = 0

# Imprimimos los resultados
print("Promedio de los números pares:", promedio_pares)
print("Producto de los números impares:", producto_impares)

//Problema 2 de Tarea

import random

numero_secreto = random.randint(1, 10)  # Generar un número aleatorio de 1 y 10
intentos = 0  # Inicia el contador de intentos

print("Bienvenido al adivina quien de los numeros")

while True:
    intento = int(input("Adivina el número secreto: "))  # Solicita al usuario que ingrese un número

    intentos += 1  # Incrementar el contador de intentos

    if intento == numero_secreto:
        print("¡Felicidades! Has adivinado el número secreto en", intentos, "intentos.")
        break  # Salir del bucle while si el usuario adivinó el número
    elif intento < numero_secreto:
        print("El número esta bajo. Intenta de nuevo.")
    else:
        print("El número esta alto. Intenta de nuevo.")

//Problema 3 de Tarea 

import random

# Definir constantes para las direcciones
UP = 0
RIGHT = 1
DOWN = 2
LEFT = 3

# Definir los símbolos para el mapa
FREE = 'o'
OBSTACLE = 'X'
ROBOT = '*'
PATH = '.'

# Definir las flechas
ARROW_UP = '↑'
ARROW_DOWN = '↓'
ARROW_LEFT = '←'
ARROW_RIGHT = '→'

# Tamaño de la matriz
ROWS = 5
COLS = 5

# Función para imprimir la matriz
def print_matrix(matrix):
    for row in matrix:
        print(' '.join(row))

# Función para generar la matriz con obstáculos aleatorios
def generate_matrix(rows, cols):
    matrix = [[FREE for _ in range(cols)] for _ in range(rows)]
    obstacles = random.sample(range(rows * cols), random.randint(1, rows * cols // 2))
    for obstacle in obstacles:
        row = obstacle // cols
        col = obstacle % cols
        matrix[row][col] = OBSTACLE
    return matrix

# Función para verificar si la posición está dentro de la matriz
def is_valid_move(matrix, row, col):
    return 0 <= row < len(matrix) and 0 <= col < len(matrix[0])

# Función para encontrar el camino
def find_path(matrix):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Derecha, Abajo, Izquierda, Arriba
    path = []
    row, col = 0, 0
    direction = RIGHT
    while True:
        if (row, col) == (len(matrix) - 1, len(matrix[0]) - 1):
            break
        found = False
        for _ in range(4):
            new_direction = (direction + _) % 4
            new_row, new_col = row + directions[new_direction][0], col + directions[new_direction][1]
            if is_valid_move(matrix, new_row, new_col) and matrix[new_row][new_col] == FREE:
                matrix[row][col] = PATH
                path.append((row, col))
                row, col = new_row, new_col
                direction = new_direction
                found = True
                break
        if not found:
            if path:
                matrix[row][col] = PATH
                row, col = path.pop()
            else:
                return None
    path.append((row, col))
    return path

# Función para imprimir el camino que el robot va a seguir
def print_path(matrix, path):
    for i in range(len(path) - 1):
        current_row, current_col = path[i]
        next_row, next_col = path[i + 1]
        if current_row == next_row:
            if current_col < next_col:
                matrix[current_row][current_col] = ARROW_RIGHT
            else:
                matrix[current_row][current_col] = ARROW_LEFT
        else:
            if current_row < next_row:
                matrix[current_row][current_col] = ARROW_DOWN
            else:
                matrix[current_row][current_col] = ARROW_UP
    matrix[path[-1][0]][path[-1][1]] = ROBOT

# Genera la matriz
matrix = generate_matrix(ROWS, COLS)
path = find_path(matrix)

# Imprime la matriz original
print("Mapa original:")
print_matrix(matrix)
print()

if path:
    # Imprimir el mapa con la ruta del robot
    print("Mapa con la ruta del robot:")
    print_path(matrix, path)
    print_matrix(matrix)
else:
    print("Imposible llegar al destino")


